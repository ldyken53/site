[
	{
		"title": "Interactive Isosurface Visualization in Memory Constrained Environments Using Deep Learning and Speculative Raycasting",
		"authors": "Landon Dyken, Will Usher, Sidharth Kumar",
		"venue": "IEEE Transactions on Visualization and Computer Graphics",
		"paper_pdf": "https://drive.google.com/file/d/1nxbCFArvHz-6HdR1oCn5PORzVu6R7d3P/view?usp=drive_link",
		"thumb": "/img/prog-iso.png",
		"year": 2024,
		"exact_date": "2024-07-01 00:00:00 -0600",
		"short_title": "prog-iso-ml-tvcg24",
		"bibtex": "@article{dyken_prog_iso_ml,\nauthor={Dyken, Landon and Usher, Will and Kumar, Sidharth},\njournal={IEEE Transactions on Visualization and Computer Graphics}, \ntitle={Interactive Isosurface Visualization in Memory Constrained Environments Using Deep Learning and Speculative Raycasting}, \nyear={2024},\ndoi={10.1109/TVCG.2024.3420225}}",
		"abstract": "New web technologies have enabled the deployment of powerful GPU-based computational pipelines that run entirely in the web browser, opening a new frontier for accessible scientific visualization applications. However, these new capabilities do not address the memory constraints of lightweight end-user devices encountered when attempting to visualize the massive data sets produced by today's simulations and data acquisition systems. We propose a novel implicit isosurface rendering algorithm for interactive visualization of massive volumes within a small memory footprint. We achieve this by progressively traversing a wavefront of rays through the volume and decompressing blocks of the data on-demand to perform implicit ray-isosurface intersections, displaying intermediate results each pass. We improve the quality of these intermediate results using a pretrained deep neural network that reconstructs the output of early passes, allowing for interactivity with better approximates of the final image. To accelerate rendering and increase GPU utilization, we introduce speculative ray-block intersection into our algorithm, where additional blocks are traversed and intersected speculatively along rays to exploit additional parallelism in the workload. Our algorithm is able to trade-off image quality to greatly decrease rendering time for interactive rendering even on lightweight devices. Our entire pipeline is run in parallel on the GPU to leverage the parallel computing power that is available even on lightweight end-user devices. We compare our algorithm to the state of the art in low-overhead isosurface extraction and demonstrate that it achieves 1.7× – 5.7× reductions in memory overhead and up to 8.4× reductions in data decompressed.",
		"downloads": [
			{
				"title": "Code",
				"list": [
					{
						"title": "Github",
						"link": "https://github.com/ldyken53/TVCG-progiso",
						"icon": "fab fa-github"
					},
                    {
                        "title": "Live demo!",
                        "link": "https://ldyken53.github.io/TVCG-progiso/#dataset=miranda",
                        "icon": "fas fa-flask"
                    }
				]
			}
		]	
	},
	{
		"title": "Speculative Progressive Raycasting for Memory Constrained Isosurface Visualization of Massive Volumes",
		"authors": "Will Usher, Landon Dyken, Sidharth Kumar",
		"venue": "IEEE Symposium on Large Data Analysis and Visualization (LDAV)",
		"paper_pdf": "https://drive.google.com/file/d/1COYwLhFFqFvQkPeaj9gIgUk3EG54n4pj/view",
		"thumb": "/img/prog-iso.png",
		"year": 2023,
		"exact_date": "2022-11-18 00:00:00 -0600",
		"short_title": "cudf",
		"award": "Best Paper",
		"bibtex": "@inproceedings{usher_speculative_2023,\nbooktitle = {13th IEEE Symposium on Large Data Analysis and Visualization},\ntitle = {{Speculative} {Progressive} {Raycasting} for {Memory} {Constrained} {Isosurface} {Visualization} of {Massive} {Volumes}},\nauthor = {Usher, Will and Dyken, Landon and Kumar, Sidharth},\nyear = {2023},\n}",
		"abstract": "New web technologies have enabled the deployment of powerful GPU-based computational pipelines that run entirely in the web browser, opening a new frontier for accessible scientific visualization applications. However, these new capabilities do not address the memory constraints of lightweight end-user devices encountered when attempting to visualize the massive data sets produced by today’s simulations and data acquisition systems. In this paper, we propose a novel implicit isosurface rendering algorithm for interactive visualization of massive volumes within a small memory footprint. We achieve this by progressively traversing a wavefront of rays through the volume and decompressing blocks of the data on-demand to perform implicit ray-isosurface intersections. The progressively rendered surface is displayed after each pass to improve interactivity. Furthermore, to accelerate rendering and increase GPU utilization, we introduce speculative ray-block intersection into our algorithm, where additional blocks are traversed and intersected speculatively along rays as other rays terminate to exploit additional parallelism in the workload. Our entire pipeline is run in parallel on the GPU to leverage the parallel computing power that is available even on lightweight end-user devices. We compare our algorithm to the state of the art in low-overhead isosurface extraction and demonstrate that it achieves 1.7×–5.7× reductions in memory overhead and up to 8.4× reductions in data decompressed.",
		"downloads": [
			{
				"title": "Code",
				"list": [
					{
						"title": "Github",
						"link": "https://github.com/Twinklebear/webgpu-prog-iso",
						"icon": "fab fa-github"
					},
                    {
                        "title": "Live demo!",
                        "link": "https://www.willusher.io/webgpu-prog-iso/",
                        "icon": "fas fa-flask"
                    }
				]
			}
		]	
	},
	{
		"title": "GraphWaGu: GPU Powered Large Scale Graph Layout Computation and Rendering for the Web",
		"authors": "Landon Dyken, Pravin Poudel, Will Usher, Steve Petruzza, Jake Y. Chen, Sidharth Kumar",
		"venue": "Eurographics Symposium on Parallel Graphics and Visualization",
		"paper_pdf": "https://drive.google.com/file/d/16PWup93vFLCWqQexop2IfRyMeQGniLqa/view?usp=sharing",
		"thumb": "/img/graphwagu.png",
		"year": 2022,
		"short_title": "graphwagu",
        "presentation_video": "https://www.youtube.com/embed/aEJRqQm-8Ew?start=1748",
		"bibtex": "@inproceedings{dyken_graphwagu_2022,\nbooktitle = {Eurographics Symposium on Parallel Graphics and Visualization},\neditor = {Bujack, R. and Tierny, J. and Sadlo, F.},\ntitle = {{GraphWaGu:} {GPU} {Powered} {Large} {Scale} {Graph} {Layout} {Computation} and {Rendering} for the {Web}},\nauthor = {Dyken, Landon and Poudel, Pravin and Usher, Will and Petruzza, Steve and Chen, Jake Y. and Kumar, Sidharth},\nyear = {2022},\n}",
		"abstract": "Large scale graphs are used to encode data from a variety of application domains such as social networks, the web, biological networks, road maps, and finance. Computing enriching layouts and interactive rendering play an important role in many of these applications. However, producing an efficient and interactive visualization of large graphs remains a major challenge, particularly in the web-browser. Existing state of the art web-based visualization systems such as D3.js, Stardust, and NetV.js struggle to achieve interactive layout and visualization for large scale graphs. In this work, we leverage the latest WebGPU technology to develop GraphWaGu, the first WebGPU-based graph visualization system. WebGPU is a new graphics API that brings the full capabilities of modern GPUs to the web browser. Leveraging the computational capabilities of the GPU using this technology enables GraphWaGu to scale to larger graphs than existing technologies. GraphWaGu embodies both fast parallel rendering and layout creation using modified Frutcherman-Reingold and Barnes-Hut algorithms implemented in WebGPU compute shaders. Experimental results demonstrate that our solution achieves the best performance, scalability, and layout quality when compared to current state of the art web-based graph visualization libraries. All of our source code for the project is available at https://github.com/harp-lab/GraphWaGu.",
		"downloads": [
			{
				"title": "Code",
				"list": [
					{
						"title": "Github",
						"link": "https://github.com/harp-lab/GraphWaGu",
						"icon": "fab fa-github"
					},
                    {
                        "title": "Live demo!",
                        "link": "https://harp-lab.github.io/GraphWaGu/",
                        "icon": "fas fa-flask"
                    }
				]
			}
		]
	},
    {
		"title": "Accelerating Datalog Applications with cuDF",
		"authors": "Ahmedur Rahman Shovon, Landon Dyken, Oded Green, Thomas Gilray, Sidharth Kumar",
		"venue": "12th Workshop on Irregular Applications: Architectures and Algorithms",
		"paper_pdf": "https://par.nsf.gov/servlets/purl/10387678",
		"thumb": "/img/cudf.png",
		"year": 2022,
		"short_title": "cudf",
		"bibtex": "@article{osti_10387678, title = {Accelerating Datalog applications with cuDF.}, url = {https://par.nsf.gov/biblio/10387678}, journal = {12th Workshop on Irregular Applications: Architectures and Algorithms}, author = {Shovon, Ahmedur Rahman and Dyken, Landon Richard and Green, Oded and Gilray, Thomas and Kumar, Sidharth} }",
		"abstract": "Datalog, a bottom-up declarative logic programming language, has a wide variety of uses for deduction, modeling, and data analysis across application domains. Datalog can be efficiently implemented using relational algebra primitives such as join, projection and union. While there exist several multi-threaded and multi-core implementations of Datalog targeting CPU-based systems, our work makes an inroad towards developing a Datalog implementation for GPUs. We demonstrate the feasibility of a high-performance relational algebra backend for a subset of Datalog applications that can effectively leverage the parallelism of GPUs using cuDF. cuDF is a library from the Rapids suite that uses the NVIDIA CUDA programming model for GPU parallelism. It provides similar functionalities to Pandas, a popular data analysis engine. In this paper, we analyze and evaluate the performance of cuDF versus Pandas for two graph-mining problems implemented in Datalog, (1) triangle counting and (2)  transitive-closure computation.",
        "downloads": []
	}
]