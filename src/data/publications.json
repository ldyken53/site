[
	{
		"title": "Enabling Fast and Accurate Crowdsourced Annotation for Elevation-Aware Flood Extent Mapping",
		"authors": "Landon Dyken, Saugat Adhikari, Pravin Poudel, Steve Petruzza, Da Yan, Will Usher, Sidharth Kumar",
		"venue": "IEEE 18th Pacific Visualization Conference (PacificVis)",
		"paper_pdf": "https://drive.google.com/file/d/1b9UmVqa7Pop6HoWim6IFrlu9U_wpjKl2/view?usp=sharing",
		"thumb": "/img/floodann.jpg",
		"year": 2025,
		"exact_date": "2025-04-24 00:00:00 -0600",
		"short_title": "floodann-pacificvis2025",
		"bibtex": "@inproceedings{dyken_flood_ann25,\nauthor={Dyken, Landon and Adhikari, Saugat and Poudel, Pravin and Petruzza, Steve and Yan, Da and Usher, Will and Kumar, Sidharth},\nbooktitle={IEEE Pacific Visualization Conference (To Appear)},\ntitle={Enabling Fast and Accurate Crowdsourced Annotation for Elevation-Aware Flood Extent Mapping},\nyear={2025},\n}",
		"abstract": "Mapping the extent of flood events is a necessary and important aspect of disaster management. In recent years, deep learning methods have evolved as an effective tool to quickly label high-resolution imagery and provide necessary flood extent mappings. These methods, though, require large amounts of annotated training data to create models that are accurate and robust to new flooded imagery. In this work, we present FloodTrace, a web-based application that enables effective crowdsourcing of flooded region annotation for machine learning applications. To create this application, we conducted extensive interviews with domain experts to produce a set of formal requirements. Our work brings topological segmentation tools to the web and greatly improves annotation efficiency compared to the state-of-the-art. The user-friendliness of our solution allows researchers to outsource annotations to non-experts and utilize them to produce training data with equal quality to fully expert-labeled data. We conducted a user study to confirm our application’s effectiveness in which 266 graduate students annotated high-resolution aerial imagery from Hurricane Matthew in North Carolina. Experimental results show the efficiency benefits of our application for untrained users, with median annotation time less than half the state-of-the-art annotation method. In addition, using our application’s aggregation and correction framework, flood detection models trained on crowdsourced annotations were able to achieve performance equal to models trained on fully expert-labeled annotations, while requiring a fraction of the expert’s time.",
		"downloads": [
			{
				"title": "Code",
				"list": [
					{
						"title": "Github",
						"link": "https://github.com/ldyken53/threejs-floodmap",
						"icon": "fab fa-github"
					}
				]
			}
		]	
	},
	{
		"title": "Accelerating Web-Based Graph Drawing with Bottom-Up GPU Quadtree Construction",
		"authors": "Landon Dyken, Will Usher, Steve Petruzza, Stavros Sintos, Sidharth Kumar",
		"supplemental_video": "https://www.youtube.com/embed/tfcHj7v7FU0?si=poT1ylxNl7lVbIop",
		"venue": "IEEE 18th Pacific Visualization Conference (PacificVis)",
		"paper_pdf": "https://sidharthkumar.io/publications/pacificVisGraphWagu.pdf",
		"thumb": "/img/graphwagu2.png",
		"year": 2025,
		"exact_date": "2025-04-23 00:00:00 -0600",
		"short_title": "graphwagu-pacificvis2025",
		"bibtex": "@inproceedings{dyken_graph25,\nauthor={Dyken, Landon and Usher, Will and Petruzza, Steve and Sintos, Stavros and Kumar, Sidharth},\nbooktitle={IEEE Pacific Visualization Conference (To Appear)},\ntitle={Accelerating Web-Based Graph Drawing with Bottom-Up GPU Quadtree Construction},\nyear={2025},\n}",
		"abstract": "Graph drawing, or graph layout creation, is a computationally difficult challenge in visualization that involves placing the vertices of a graph into a layout that provides insight into its structure. In order to visualize large-scale graphs, effective layouts are necessary for understanding. Previous work has shown the potential for graph drawing directly in the web browser by using WebGPU, a new API that brings the full capabilities of modern GPUs to the web. Compared to the existing state-of-the-art for web-based graph visualization, which rely on CPU-based graph drawing algorithms, WebGPU-accelerated work improves performance and scalability. However, we find that existing WebGPU solutions utilize suboptimal quadtree data structures for graph drawing. In this work, we implement a modified quadtree data structure that uses a Hilbert spatial ordering for a fully parallelizable bottom-up construction algorithm in WebGPU. We utilize this data structure, along with optimizations to the quadtree traversal, to propose a massively more performant graph drawing algorithm. We evaluate the performance of our work against the existing state-of-the-art and demonstrate up to 69.5× speed-ups for layout creation of relevant graphs while enabling graph drawing for datasets of much larger size.",
		"downloads": [
			{
				"title": "Code",
				"list": [
					{
						"title": "Github",
						"link": "https://github.com/harp-lab/GraphWaGu",
						"icon": "fab fa-github"
					},
                    {
                        "title": "Live demo!",
                        "link": "https://harp-lab.github.io/GraphWaGu/",
                        "icon": "fas fa-flask"
                    }
				]
			}
		]	
	},
	{
		"title": "Interactive Isosurface Visualization in Memory Constrained Environments Using Deep Learning and Speculative Raycasting",
		"authors": "Landon Dyken, Will Usher, Sidharth Kumar",
		"venue": "IEEE Transactions on Visualization and Computer Graphics",
		"paper_pdf": "https://drive.google.com/file/d/1nxbCFArvHz-6HdR1oCn5PORzVu6R7d3P/view?usp=drive_link",
		"thumb": "/img/prog-iso-ml.jpg",
		"year": 2024,
		"exact_date": "2024-07-01 00:00:00 -0600",
		"short_title": "prog-iso-ml-tvcg24",
		"bibtex": "@article{dyken_prog_iso_ml,\nauthor={Dyken, Landon and Usher, Will and Kumar, Sidharth},\njournal={IEEE Transactions on Visualization and Computer Graphics}, \ntitle={Interactive Isosurface Visualization in Memory Constrained Environments Using Deep Learning and Speculative Raycasting}, \nyear={2024},\ndoi={10.1109/TVCG.2024.3420225}}",
		"abstract": "New web technologies have enabled the deployment of powerful GPU-based computational pipelines that run entirely in the web browser, opening a new frontier for accessible scientific visualization applications. However, these new capabilities do not address the memory constraints of lightweight end-user devices encountered when attempting to visualize the massive data sets produced by today's simulations and data acquisition systems. We propose a novel implicit isosurface rendering algorithm for interactive visualization of massive volumes within a small memory footprint. We achieve this by progressively traversing a wavefront of rays through the volume and decompressing blocks of the data on-demand to perform implicit ray-isosurface intersections, displaying intermediate results each pass. We improve the quality of these intermediate results using a pretrained deep neural network that reconstructs the output of early passes, allowing for interactivity with better approximates of the final image. To accelerate rendering and increase GPU utilization, we introduce speculative ray-block intersection into our algorithm, where additional blocks are traversed and intersected speculatively along rays to exploit additional parallelism in the workload. Our algorithm is able to trade-off image quality to greatly decrease rendering time for interactive rendering even on lightweight devices. Our entire pipeline is run in parallel on the GPU to leverage the parallel computing power that is available even on lightweight end-user devices. We compare our algorithm to the state of the art in low-overhead isosurface extraction and demonstrate that it achieves 1.7× – 5.7× reductions in memory overhead and up to 8.4× reductions in data decompressed.",
		"downloads": [
			{
				"title": "Code",
				"list": [
					{
						"title": "Github",
						"link": "https://github.com/ldyken53/TVCG-progiso",
						"icon": "fab fa-github"
					},
                    {
                        "title": "Live demo!",
                        "link": "https://ldyken53.github.io/TVCG-progiso/#dataset=miranda",
                        "icon": "fas fa-flask"
                    }
				]
			}
		]	
	},
	{
		"title": "Bruck Algorithm Performance Analysis for Multi-GPU All-to-All Communication",
		"authors": "Andres Sewell, Ke Fan, Ahmedur Rahman Shovon, Landon Dyken, Sidharth Kumar, Steve Petruzza",
		"venue": "Proceedings of the International Conference on High Performance Computing in Asia-Pacific Region (HPCAsia '24)",
		"paper_pdf": "https://dl.acm.org/doi/pdf/10.1145/3635035.3635047",
		"thumb": "/img/bruck.png",
		"year": 2024,
		"exact_date": "2024-01-19 00:00:00 -0600",
		"short_title": "bruck-gpu",
		"bibtex": "@inproceedings{10.1145/3635035.3635047,\nauthor = {Sewell, Andres and Fan, Ke and Shovon, Ahmedur Rahman and Dyken, Landon and Kumar, Sidharth and Petruzza, Steve},\ntitle = {Bruck Algorithm Performance Analysis for Multi-GPU All-to-All Communication},\nyear = {2024},\nisbn = {9798400708893},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nurl = {https://doi.org/10.1145/3635035.3635047},\ndoi = {10.1145/3635035.3635047},\nbooktitle = {Proceedings of the International Conference on High Performance Computing in Asia-Pacific Region},\npages = {127–133},\nnumpages = {7},\nlocation = {Nagoya, Japan},\nseries = {HPCAsia '24}\n}",
		"abstract": "In high-performance computing, collective communication is critical for facilitating comprehensive data exchange involving all processes within an MPI communicator. Due to their inherently global nature, many collective operations present scalability challenges, particularly the all-to-all data shuffle with its quadratic communication pattern. Using a logarithmic communication pattern, the Bruck algorithm was designed to provide communication efficiency for all-to-all data shuffles involving short-sized messages. The Bruck algorithm has been extensively used to facilitate global data shuffles in a multi-CPU environment and is also part of the MPICH and Open MPI implementations. This work presents the first investigation of using the Bruck algorithm for all-to-all communication in multi-GPU systems using the NVIDIA Collective Communications Library (NCCL). Our experimental study demonstrates that while the Bruck algorithm exhibits superior performance for small-sized messages in a multi-CPU environment, the same advantages are not evident for multi-GPU environments. Furthermore, we describe and compare an optimized Bruck algorithm implementation in NCCL and compare it to NCCL’s default all-to-all and MPI-based implementations. Finally, we discuss the challenges and opportunities of implementing new multi-GPU collectives using NCCL’s public-facing API.",
		"downloads": [
			{
				"title": "Code",
				"list": [
					{
						"title": "Github",
						"link": "https://github.com/ldyken53/TVCG-progiso",
						"icon": "fab fa-github"
					}
				]
			}
		]	
	},
	{
		"title": "Speculative Progressive Raycasting for Memory Constrained Isosurface Visualization of Massive Volumes",
		"authors": "Will Usher, Landon Dyken, Sidharth Kumar",
		"venue": "IEEE Symposium on Large Data Analysis and Visualization (LDAV)",
		"paper_pdf": "https://drive.google.com/file/d/1COYwLhFFqFvQkPeaj9gIgUk3EG54n4pj/view",
		"thumb": "/img/prog-iso.png",
		"year": 2023,
		"exact_date": "2022-11-18 00:00:00 -0600",
		"short_title": "cudf",
		"award": "Best Paper",
		"bibtex": "@inproceedings{usher_speculative_2023,\nbooktitle = {13th IEEE Symposium on Large Data Analysis and Visualization},\ntitle = {{Speculative} {Progressive} {Raycasting} for {Memory} {Constrained} {Isosurface} {Visualization} of {Massive} {Volumes}},\nauthor = {Usher, Will and Dyken, Landon and Kumar, Sidharth},\nyear = {2023},\n}",
		"abstract": "New web technologies have enabled the deployment of powerful GPU-based computational pipelines that run entirely in the web browser, opening a new frontier for accessible scientific visualization applications. However, these new capabilities do not address the memory constraints of lightweight end-user devices encountered when attempting to visualize the massive data sets produced by today’s simulations and data acquisition systems. In this paper, we propose a novel implicit isosurface rendering algorithm for interactive visualization of massive volumes within a small memory footprint. We achieve this by progressively traversing a wavefront of rays through the volume and decompressing blocks of the data on-demand to perform implicit ray-isosurface intersections. The progressively rendered surface is displayed after each pass to improve interactivity. Furthermore, to accelerate rendering and increase GPU utilization, we introduce speculative ray-block intersection into our algorithm, where additional blocks are traversed and intersected speculatively along rays as other rays terminate to exploit additional parallelism in the workload. Our entire pipeline is run in parallel on the GPU to leverage the parallel computing power that is available even on lightweight end-user devices. We compare our algorithm to the state of the art in low-overhead isosurface extraction and demonstrate that it achieves 1.7×–5.7× reductions in memory overhead and up to 8.4× reductions in data decompressed.",
		"downloads": []	
	},
	{
		"title": "GraphWaGu: GPU Powered Large Scale Graph Layout Computation and Rendering for the Web",
		"authors": "Landon Dyken, Pravin Poudel, Will Usher, Steve Petruzza, Jake Y. Chen, Sidharth Kumar",
		"venue": "Eurographics Symposium on Parallel Graphics and Visualization",
		"paper_pdf": "https://drive.google.com/file/d/16PWup93vFLCWqQexop2IfRyMeQGniLqa/view?usp=sharing",
		"thumb": "/img/graphwagu.png",
		"year": 2022,
		"short_title": "graphwagu",
        "presentation_video": "https://www.youtube.com/embed/aEJRqQm-8Ew?start=1748",
		"bibtex": "@inproceedings{dyken_graphwagu_2022,\nbooktitle = {Eurographics Symposium on Parallel Graphics and Visualization},\neditor = {Bujack, R. and Tierny, J. and Sadlo, F.},\ntitle = {{GraphWaGu:} {GPU} {Powered} {Large} {Scale} {Graph} {Layout} {Computation} and {Rendering} for the {Web}},\nauthor = {Dyken, Landon and Poudel, Pravin and Usher, Will and Petruzza, Steve and Chen, Jake Y. and Kumar, Sidharth},\nyear = {2022},\n}",
		"abstract": "Large scale graphs are used to encode data from a variety of application domains such as social networks, the web, biological networks, road maps, and finance. Computing enriching layouts and interactive rendering play an important role in many of these applications. However, producing an efficient and interactive visualization of large graphs remains a major challenge, particularly in the web-browser. Existing state of the art web-based visualization systems such as D3.js, Stardust, and NetV.js struggle to achieve interactive layout and visualization for large scale graphs. In this work, we leverage the latest WebGPU technology to develop GraphWaGu, the first WebGPU-based graph visualization system. WebGPU is a new graphics API that brings the full capabilities of modern GPUs to the web browser. Leveraging the computational capabilities of the GPU using this technology enables GraphWaGu to scale to larger graphs than existing technologies. GraphWaGu embodies both fast parallel rendering and layout creation using modified Frutcherman-Reingold and Barnes-Hut algorithms implemented in WebGPU compute shaders. Experimental results demonstrate that our solution achieves the best performance, scalability, and layout quality when compared to current state of the art web-based graph visualization libraries. All of our source code for the project is available at https://github.com/harp-lab/GraphWaGu.",
		"downloads": [
			{
				"title": "Code",
				"list": [
					{
						"title": "Github",
						"link": "https://github.com/harp-lab/GraphWaGu",
						"icon": "fab fa-github"
					},
                    {
                        "title": "Live demo!",
                        "link": "https://harp-lab.github.io/GraphWaGu/",
                        "icon": "fas fa-flask"
                    }
				]
			}
		]
	},
    {
		"title": "Accelerating Datalog Applications with cuDF",
		"authors": "Ahmedur Rahman Shovon, Landon Dyken, Oded Green, Thomas Gilray, Sidharth Kumar",
		"venue": "12th Workshop on Irregular Applications: Architectures and Algorithms",
		"paper_pdf": "https://par.nsf.gov/servlets/purl/10387678",
		"thumb": "/img/cudf.png",
		"year": 2022,
		"short_title": "cudf",
		"bibtex": "@article{osti_10387678, title = {Accelerating Datalog applications with cuDF.}, url = {https://par.nsf.gov/biblio/10387678}, journal = {12th Workshop on Irregular Applications: Architectures and Algorithms}, author = {Shovon, Ahmedur Rahman and Dyken, Landon Richard and Green, Oded and Gilray, Thomas and Kumar, Sidharth} }",
		"abstract": "Datalog, a bottom-up declarative logic programming language, has a wide variety of uses for deduction, modeling, and data analysis across application domains. Datalog can be efficiently implemented using relational algebra primitives such as join, projection and union. While there exist several multi-threaded and multi-core implementations of Datalog targeting CPU-based systems, our work makes an inroad towards developing a Datalog implementation for GPUs. We demonstrate the feasibility of a high-performance relational algebra backend for a subset of Datalog applications that can effectively leverage the parallelism of GPUs using cuDF. cuDF is a library from the Rapids suite that uses the NVIDIA CUDA programming model for GPU parallelism. It provides similar functionalities to Pandas, a popular data analysis engine. In this paper, we analyze and evaluate the performance of cuDF versus Pandas for two graph-mining problems implemented in Datalog, (1) triangle counting and (2)  transitive-closure computation.",
        "downloads": []
	}
]